plugins {
	id 'org.springframework.boot' version '2.7.2'
	id 'io.spring.dependency-management' version '1.0.12.RELEASE'
	id 'java'
	id 'com.google.cloud.tools.jib' version '3.2.1'
}

group = 'com.graphql-java.tutorial'
version = '0.1.0-SNAPSHOT'
sourceCompatibility = '11'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'junit:junit:4.13.2'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
	implementation 'com.graphql-java:graphql-java:19.1' // NEW
	implementation 'com.graphql-java:graphql-java-spring-boot-starter-webmvc:2.0' // NEW
	implementation 'com.google.guava:guava:31.1-jre' // NEW
	implementation 'org.springframework.boot:spring-boot-starter-web'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	implementation 'com.graphql-java:graphiql-spring-boot-starter:5.0.2' // Weboberfl√§che GraphiQL

	testImplementation 'org.springframework.graphql:spring-graphql-test'
}

springBoot {
	mainClass = 'com.graphqljava.tutorial.glossardetails.GlossarDetailsApplication'
}

tasks.named('test') {
	useJUnitPlatform()
}


// Docker Image Build
jib {
	from {
		image = 'adoptopenjdk/openjdk11:jre-11.0.8_10-alpine'
	}
	to {
		image = 'ghcr.io/ni920/graphql-helloworld/graphqlhelloworld:0.1.0'
		//credHelper = 'osxkeychain'
		tags = ['latest']
		//containerizingMode = 'packaged'

	}
	container {
		//jvmFlags = ['-Dmy.property=example.value', '-Xms512m', '-Xdebug']
		mainClass = 'com.graphqljava.tutorial.glossardetails.GlossarDetailsApplication'
		ports = ['8090']
		format = 'OCI'
		creationTime = 'USE_CURRENT_TIMESTAMP'

	}
}
